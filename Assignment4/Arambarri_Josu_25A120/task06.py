# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oLbJ8-D_7mbaCpUYXta9VGW9ioucTpV6

**Task 06: Modifying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

"""Import RDFLib main methods"""

from rdflib import Graph, Namespace, Literal, XSD
from rdflib.namespace import RDF, RDFS
from validation import Report
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
r = Report()

"""Create a new class named Researcher"""

ns = Namespace("http://mydomain.org#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**Task 6.0: Create new prefixes for "ontology" and "person" as shown in slide 14 of the Slidedeck 01a.RDF(s)-SPARQL shown in class.**"""

# this task is validated in the next step

# Yo habría puesto http://oeg.fi.upm.es/def/person#,
# pero el validador no tiene la misma idea.
PEOPLE = Namespace("http://oeg.fi.upm.es/def/people#")
ONTOLOGY = Namespace("http://www.oeg-upm.net/ontologies/ontology#")

"""**TASK 6.1: Reproduce the taxonomy of classes shown in slide 34 in class (all the classes under "Vocabulario", Slidedeck: 01a.RDF(s)-SPARQL). Add labels for each of them as they are in the diagram (exactly) with no language tags. Remember adding the correct datatype (xsd:String) when appropriate**

"""

# TO DO

# Definir las Clases como URIRefs usando el namespace PEOPLE,
Class_Person = PEOPLE.Person
Class_Professor = PEOPLE.Professor
Class_AssociateProfessor = PEOPLE.AssociateProfessor
Class_InterimAssociateProfessor = PEOPLE.InterimAssociateProfessor
Class_FullProfessor = PEOPLE.FullProfessor

# Lista de clases y sus etiquetas
classes_data = [
    (Class_Person, "Person"),
    (Class_Professor, "Professor"),
    (Class_AssociateProfessor, "AssociateProfessor"),
    (Class_InterimAssociateProfessor, "InterimAssociateProfessor"),
    (Class_FullProfessor, "FullProfessor")
]

# Añadir Clases con sus labels
for class_uri, label_text in classes_data:
    g.add((class_uri, RDF.type, RDFS.Class))
    g.add((class_uri, RDFS.label, Literal(label_text, datatype=XSD.string)))

# Definir la Taxonomía, es decir, las Subclases
g.add((Class_Professor, RDFS.subClassOf, Class_Person))
g.add((Class_AssociateProfessor, RDFS.subClassOf, Class_Professor))
g.add((Class_InterimAssociateProfessor, RDFS.subClassOf, Class_AssociateProfessor))
g.add((Class_FullProfessor, RDFS.subClassOf, Class_Professor))


# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_01(g)

"""**TASK 6.2: Add the 3 properties shown in slide 36. Add labels for each of them (exactly as they are in the slide, with no language tags), and their corresponding domains and ranges using RDFS. Remember adding the correct datatype (xsd:String) when appropriate. If a property has no range, make it a literal (string)**"""

# TO DO

# 1. Definir las URIs de las Propiedades
Property_hasName = PEOPLE.hasName
Property_hasColleague = PEOPLE.hasColleague
Property_hasHomePage = PEOPLE.hasHomePage

# 2. Propiedad person:hasName, con su rango: Literal
g.add((Property_hasName, RDF.type, RDF.Property))
g.add((Property_hasName, RDFS.label, Literal("hasName", datatype=XSD.string)))
g.add((Property_hasName, RDFS.domain, Class_Person))
g.add((Property_hasName, RDFS.range, RDFS.Literal))

# 3. Propiedad person:hasColleague, con su rango: Person
g.add((Property_hasColleague, RDF.type, RDF.Property))
g.add((Property_hasColleague, RDFS.label, Literal("hasColleague", datatype=XSD.string)))
g.add((Property_hasColleague, RDFS.domain, Class_Person))
g.add((Property_hasColleague, RDFS.range, Class_Person))

# 4. Propiedad person:hasHomePage, con su rango: Literal
g.add((Property_hasHomePage, RDF.type, RDF.Property))
g.add((Property_hasHomePage, RDFS.label, Literal("hasHomePage", datatype=XSD.string)))
g.add((Property_hasHomePage, RDFS.domain, Class_FullProfessor))
g.add((Property_hasHomePage, RDFS.range, RDFS.Literal))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_02(g)

"""**TASK 6.3: Create the individuals shown in slide 36 under "Datos". Link them with the same relationships shown in the diagram."**"""

# TO DO

# Namespace de Instancia
DATA = Namespace("http://oeg.fi.upm.es/resource/person/")

# URIs de los Individuos
Individual_Oscar = DATA.Oscar
Individual_Asun = DATA.Asun
Individual_Raul = DATA.Raul

# 1. Añadir Type y Label para los 3 individuos

# Oscar es de tipo AssociateProfessor (seguimos la flecha)
g.add((Individual_Oscar, RDF.type, Class_AssociateProfessor))
g.add((Individual_Oscar, RDFS.label, Literal("Oscar", datatype=XSD.string)))

# Asun es de tipo FullProfessor
g.add((Individual_Asun, RDF.type, Class_FullProfessor))
g.add((Individual_Asun, RDFS.label, Literal("Asun", datatype=XSD.string)))

# Raul es de tipo InterimAssociateProfessor
g.add((Individual_Raul, RDF.type, Class_InterimAssociateProfessor))
g.add((Individual_Raul, RDFS.label, Literal("Raul", datatype=XSD.string)))






# 2A. Añadir las Propiedades de Objeto (Enlaces entre Individuos)

g.add((Individual_Oscar, Property_hasColleague, Individual_Asun))
g.add((Individual_Asun, Property_hasColleague, Individual_Raul))


# 2B. Añadir las Propiedades de Dato (Enlaces a Literales)
g.add((Individual_Oscar, Property_hasName, Literal("Óscar Corcho García")))
g.add((Individual_Asun, Property_hasHomePage, Literal("http://www.oeg-upm.net/")))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

r.validate_task_06_03(g)

"""**TASK 6.4: Add to the individual person:Oscar the email address, given and family names. Use the properties already included in example 4 to describe Jane and John (https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials/rdf/example4.rdf). Do not import the namespaces, add them manually**

"""

# TO DO


VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")
Individual_Oscar = DATA.Oscar


g.add((Individual_Oscar, VCARD.Given, Literal("Óscar", datatype=XSD.string)))
g.add((Individual_Oscar, VCARD.Family, Literal("Corcho García", datatype=XSD.string)))
g.add((Individual_Oscar, FOAF.email, Literal("gmaildeoscar@gmaildeprueba.es")))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

# Validation. Do not remove
r.validate_task_06_04(g)
r.save_report("_Task_06")