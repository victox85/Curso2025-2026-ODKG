# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l9aDrFiQvhRDg-yQ20PFX75jo56WgWd3

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belongs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO

result = []

# 1. Encontrar todas las URIs de tipo Clase
classes = set(g.subjects(RDF.type, RDFS.Class))

# 2. Iterar sobre cada clase y buscar su superclase
for c in classes:
  superclasses = list(g.objects(c, RDFS.subClassOf))


  if not superclasses:
    if c != RDFS.Class:
      result.append((c, None))
  else:

    for sc in superclasses:
      if sc != c:
        result.append((c, sc))

result = sorted(list(set(result)), key=str)

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT ?c ?sc
WHERE {
  ?c a rdfs:Class .
  OPTIONAL {
    ?c rdfs:subClassOf ?sc .
    FILTER (?c != ?sc)
  }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")


individuals = []

# Obtener las Subclases de forma Recursiva
def subcl(cls):
    subclasses = set()
    for s in g.subjects(RDFS.subClassOf, cls):
        subclasses.add(s)
        subclasses |= subcl(s)
    return subclasses
classes =  subcl(ns.Person)

# Añadimos los Sujetos de cada clase
for c in classes:
    for s in g.subjects(RDF.type, c):
        individuals.append(s)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?ind
WHERE {
  ?subClass rdfs:subClassOf* ns:Person .
  ?ind a ?subClass .
}
"""
for r in g.query(query):
  print(r.ind)

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# TO DO

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky.
  ?person rdfs:label ?name.
  ?person a ?type.
}
"""

# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX people: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name
WHERE {
    {
      ?person people:hasColleague ?amigo .
      ?amigo people:ownsPet ?perro.
      ?perro rdf:type people:Animal .
    }
    UNION # para representar la disyunción
    {
      ?person people:hasColleague ?amigo .
      ?amigo people:hasColleague ?amego .
      ?amego people:ownsPet ?perro.
      ?pet rdf:type people:Animal .
    }
    ?person rdfs:label ?name
  }
"""

for r in g.query(query):
  print(r.name)

# He asumido que ANIMAL == PERRO y me sale bien.

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")